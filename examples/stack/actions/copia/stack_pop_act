pred precondition_stack_pop
[values:JavaPrimitiveIntegerValue->lone JavaPrimitiveIntegerValue]{    
  not (no values) and sequence[values]
}





pred postcondition_stack_pop 
[ size:JavaPrimitiveIntegerValue,
  size':JavaPrimitiveIntegerValue,
  values:JavaPrimitiveIntegerValue->lone JavaPrimitiveIntegerValue,
  values':JavaPrimitiveIntegerValue->lone JavaPrimitiveIntegerValue,
  ret: JavaPrimitiveIntegerValue
]
{

some a:JavaPrimitiveIntegerValue |   myseq_card[values,size]  
and pred_java_primitive_integer_value_add[size',i321,size,false] 
and a=int32_max[values.JavaPrimitiveIntegerValue] 
and values'=values-(a->ret) and (a->ret) in values


}


act stack_pop_action
[/*inout*/size:JavaPrimitiveIntegerValue,thisType_1:JavaPrimitiveIntegerValue->lone JavaPrimitiveIntegerValue,/*out*/return_intJ_1: JavaPrimitiveIntegerValue]{  
    pre { precondition_stack_pop[thisType_1] }
    post { postcondition_stack_pop[size,size',thisType_1,thisType_1',return_intJ_1'] }
}/*scope:1*/





