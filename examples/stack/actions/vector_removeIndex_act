//Elimina un elemento del vector, se pasa el indice como parametro  y retorna el elemento removido
pred precondition_Lista_remove_m
[
  indice:JavaPrimitiveIntegerValue,
  values:JavaPrimitiveIntegerValue->(JavaPrimitiveIntegerValue+Null)
]{  not (no indice.values)
}

pred postcondition_Lista_remove_m
[ size:JavaPrimitiveIntegerValue,size':JavaPrimitiveIntegerValue,
  indice:JavaPrimitiveIntegerValue, 
  values:JavaPrimitiveIntegerValue->(JavaPrimitiveIntegerValue+Null),
  values':JavaPrimitiveIntegerValue->(JavaPrimitiveIntegerValue+Null),
  ret: JavaPrimitiveIntegerValue,
  vac:boolean,
  vac':boolean


]
{




(pred_java_primitive_integer_value_eq[size',i320] implies vac'=true) and 
   (pred_java_primitive_integer_value_neq[size',i320] implies vac'=false) and 


  sequence[values] and sequence[values']  and 

  pred_java_primitive_integer_value_eq[ret,indice.values]  

and 

 (all a,b:JavaPrimitiveIntegerValue | (a->b) in values implies 
	(( pred_java_primitive_integer_value_lt[a,indice] implies (a->b) in  values') and
	 ( pred_java_primitive_integer_value_gt[a,indice] implies (fun_java_primitive_integer_value_sub[a,i321]->b) in values'))
) and 
  JavaPrimitiveIntegerValue.values' + indice.values = JavaPrimitiveIntegerValue.values  

and  myseq_card[values,size] and  let ss=fun_java_primitive_integer_value_sub[size,i321] |
   not (((ss)->JavaPrimitiveIntegerValue) in values')  and myseq_card[values',ss] 

}


act vector_removeIndex_action[
   /*inout*/size:JavaPrimitiveIntegerValue,
   /*in*/intJ_1:JavaPrimitiveIntegerValue,
   /*inout*/thisType_1:JavaPrimitiveIntegerValue->(JavaPrimitiveIntegerValue+Null),
   /*out*/return_Jint_1:JavaPrimitiveIntegerValue,
   /*inout*/ vac:boolean]
{  
   pre { precondition_Lista_remove_m[intJ_1,thisType_1] }
   post { postcondition_Lista_remove_m[size,size',intJ_1,thisType_1,thisType_1',return_Jint_1',vac,vac'] }
}/*scope:1*/



